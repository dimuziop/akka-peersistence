
akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"
akka.actor.allow-java-serialization = on
akka.actor.serialize-messages = on

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/localStores/journal"
  akka.actor.allow-java-serialization = on
  akka.actor.serialize-messages = on

  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistent-actor = 1000
    "*" = 5000
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
    columnNames {
      ordering = "ordering"
      deleted = "deleted"
      persistenceId = "persistence_id"
      sequenceNumber = "sequence_number"
      writer = "writer"
      writeTimestamp = "write_timestamp"
      adapterManifest = "adapter_manifest"
      eventPayload = "event_payload"
      eventSerId = "event_ser_id"
      eventSerManifest = "event_ser_manifest"
      metaPayload = "meta_payload"
      metaSerId = "meta_ser_id"
      metaSerManifest = "meta_ser_manifest"
    }
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "akka.persistence.cassandra.journal"
  akka.persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

  datastax-java-driver.profiles {
    akka-persistence-cassandra-profile {
      basic.request.consistency = LOCAL_QUORUM
    }
  }

  // default values
}

customSerializerDemo {
  akka.persistence.journal.plugin = "akka.persistence.cassandra.journal"
  akka.persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      rtjvm = "part3_stores_serialization.UserRegistrationSerializer"
    }

    serialization-bindings {
      "part3_stores_serialization.UserRegistered" = rtjvm
      // java serializer is used by default
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "akka.persistence.cassandra.journal"
  akka.persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

  akka.actor.allow-java-serialization = on
  akka.actor.serialize-messages = on

  #cassandra-journal {
  #  event-adapters {
  #    guitar-inventory-enhancer = "part4_practices.EventAdapters$GuitarReadEventAdapter"
  #  }
#
  #  event-adapter-bindings {
  #    "part4_practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
  #  }
  #}
}

#detachingModels {
#  akka.persistence.journal.plugin = "cassandra-journal"
#  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
#
#  cassandra-journal {
#    event-adapters {
#      detach-adapter = "part4_practices.ModelAdapter"
#    }
#
#    event-adapter-bindings {
#      "part4_practices.DomainModel$CouponApplied" = detach-adapter
#      "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
#      "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
#    }
#  }
#}
#
#persistenceQuery {
#  akka.persistence.journal.plugin = "cassandra-journal"
#  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
#
#  cassandra-journal {
#    event-adapters {
#      tagging = "part4_practices.PersistenceQueryDemo$MusicStoreEventAdapter"
#    }
#
#    event-adapter-bindings {
#      "part4_practices.PersistenceQueryDemo$PlaylistPurchased" = tagging
#    }
#  }
#}